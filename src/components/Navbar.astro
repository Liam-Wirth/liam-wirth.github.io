---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: 'Home', href: '/' },
  { label: 'Work', href: '/work/' },
  { label: 'About', href: '/about/' },
];

const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
  { label: 'Twitch', href: 'https://twitch.tv/me', icon: 'twitch-logo' },
  { label: 'GitHub', href: 'https://github.com/me', icon: 'github-logo' },
  { label: 'Instagram', href: 'https://instagram.com/me', icon: 'instagram-logo' },
  { label: 'CodePen', href: 'https://codepen.io/me', icon: 'codepen-logo' },
  { label: 'YouTube', href: 'https://www.youtube.com/@me/', icon: 'youtube-logo' },
];
---

<nav class="relative z-50 mb-14">
  <div class="flex justify-between gap-2.5 p-6">
    <a href="/" class="flex items-center gap-2.5 no-underline text-gray-0">
      <Icon icon="terminal-window" color="var(--accent-regular)" size="1.6em" gradient />
      Liam Wirth
    </a>
    <menu-button>
      <template>
        <button class="relative flex border-0 rounded-full p-2 text-2xl text-gray-300 bg-gradient-radial from-gray-900 via-gray-800 to-150% shadow-md" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <noscript>
    <ul class="flex flex-col gap-4 p-8 bg-gray-900 border-b border-gray-500">
      {textLinks.map(({ label, href }) => (
        <li>
          <a
            aria-current={Astro.url.pathname === href}
            class:list={[
              'link',
              {
                active: Astro.url.pathname === href || (href !== '/' && Astro.url.pathname.startsWith(href)),
              },
            ]}
            class="inline-block text-gray-300 no-underline"
            href={href}
          >
            {label}
          </a>
        </li>
      ))}
    </ul>
  </noscript>
  <noscript>
    <div class="flex justify-between gap-3.5 p-6 bg-gray-900 border-b border-gray-800">
      <div class="flex flex-wrap gap-2.5 text-xl">
        {iconLinks.map(({ href, icon, label }) => (
          <a href={href} class="flex p-2.5 no-underline text-accent-dark transition-colors hover:text-accent-text-over focus:text-accent-text-over">
            <span class="sr-only">{label}</span>
            <Icon icon={icon} />
          </a>
        ))}
      </div>
    </div>
  </noscript>
  <div id="menu-content" hidden class="absolute inset-x-0">
    <ul class="flex flex-col gap-4 p-8 bg-gray-900 border-b border-gray-800">
      {textLinks.map(({ label, href }) => (
        <li>
          <a
            aria-current={Astro.url.pathname === href}
            class:list={[
              'link',
              {
                active: Astro.url.pathname === href || (href !== '/' && Astro.url.pathname.startsWith(href)),
              },
            ]}
            class="inline-block text-gray-300 no-underline"
            href={href}
          >
            {label}
          </a>
        </li>
      ))}
    </ul>
    <div class="flex justify-between gap-3.5 p-6 bg-gray-900 border-b border-gray-800">
      <div class="flex flex-wrap gap-2.5 text-xl">
        {iconLinks.map(({ href, icon, label }) => (
          <a href={href} class="flex p-2.5 no-underline text-accent-dark transition-colors hover:text-accent-text-over focus:text-accent-text-over">
            <span class="sr-only">{label}</span>
            <Icon icon={icon} />
          </a>
        ))}
      </div>

      <div class="flex items-center h-[calc(theme(fontSize.xl)+theme(padding.2))]">
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      const btn = this.querySelector('button')!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById('menu-content')!;
      menu.hidden = true;
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add('menu-content');

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand) => {
        btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
        menu.hidden = !expand;
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener('click', () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia('(min-width: 50em)');
      handleViewports(mediaQueries);
      mediaQueries.addEventListener('change', handleViewports);
    }
  }
  customElements.define('menu-button', MenuButton);
</script>

